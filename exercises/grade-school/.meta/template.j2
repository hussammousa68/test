{%- import "generator_macros.j2" as macros -%}
{%- macro test_case( case) -%}
    {%- set input = case["input"] -%}
    def test_{{ case["description"] | to_snake }}(self):
        school = School()
        {% for student, grade in input["students"] -%}
        school.add_student(name="{{ student }}", grade={{ grade }})
        {% endfor -%}
        expected = {{ case["expected"] }}
        {% if "desiredGrade" in input -%}
        self.assertEqual(school.{{ case["property"] | to_snake }}({{ input["desiredGrade"] }}), expected)
        {%- else -%}
        self.assertEqual(school.{{ case["property"] | to_snake }}(), expected)
        {%- endif %}
{% endmacro -%}
import unittest

from {{ exercise | to_snake }} import School

{{ macros.canonical_ref(version) }}

class {{ exercise | camel_case }}Test(unittest.TestCase):
    {% for case in cases %}
    {{ test_case(case) }}
    {% endfor %}

{{ macros.footer(has_error_case) }}
