{%- import "generator_macros.j2" as macros with context -%}
{% macro test_case(case) -%}
    def test_{{ case["description"] | to_snake }}(self):
        account = BankAccount()
        {%- set inputs = case["input"]["operations"] -%}
        {%- if case["expected"] -%}
            {%- set error_case = true -%}
            {%- set error_msg =  case["expected"]["error"] -%}
            {%- set error_operation = inputs[-1]["operation"] -%}
            {%- set final_value = inputs[-1]["value"] -%}
        {% endif %}
        {%- if case["expected"] and inputs|length > 1 -%}
            {%- set inputs = inputs[:-1] -%}
        {%- endif -%}
        {%- for input in inputs -%}
            {%- set operation = input["operation"] -%}
            {%- set value = input["value"] -%}
            {%- set expected = input["expected"] %}
            {%- if operation and value %}
        account.{{ operation }}({{ value }})
            {%- elif operation == "amount" %}
        self.assertEqual(account.get_balance(), {{ expected }})
            {%- elif operation and not value %}
        account.{{ operation }}()
        {%- endif  %}
    {%- endfor %}
    {%- if error_case %}
        with self.assertRaises(ValueError) as err:
            account.{{ error_operation }}({{ final_value if final_value else "" }})
        self.assertEqual(type(err.exception), ValueError)
        self.assertEqual(err.exception.args[0], "{{ error_msg }}")
    {%- endif  %}
{% endmacro %}

{{ macros.header(["BankAccount"]) }}

class {{ exercise | camel_case }}Test(unittest.TestCase):
    {% for case in cases -%}
    {{ test_case(case) }}
    {% endfor %}
    {% if additional_cases | length -%}

    # Additional tests for this track
    {% for case in additional_cases -%}
    {{ test_case(case) }}
    {% endfor %}
    {%- endif %}
