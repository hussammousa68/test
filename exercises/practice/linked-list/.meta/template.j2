{%- import "generator_macros.j2" as macros with context -%}
{% macro test_case(case) -%}
    def test_{{ case["description"] | to_snake }}(self):
        lst = LinkedList()
        {%- set inputs = case["input"]["operations"] -%}
        {%- if case["expected"] and inputs|length > 1 -%}
            {%- set last = inputs[-1]["operation"] -%}
            {% set inputs = inputs[:-1] %}
        {%- elif case["expected"] -%}
            {% set last = inputs[-1]["operation"] %}
            {% set inputs = [{"operation": "None"}] %}
        {%- endif %}
        {% for input in inputs -%}
            {%- if "push" == input["operation"] -%}
                lst.push({{ input["value"] }})
            {%- elif "pop" == input["operation"] and input["expected"] -%}
                self.assertEqual(lst.pop(), {{ input["expected"] }})
            {%- elif "pop" == input["operation"] -%}
                lst.pop()
            {%- elif "shift" == input["operation"] and input["expected"] -%}
                self.assertEqual(lst.shift(), {{ input["expected"] }})
            {%- elif "shift" == input["operation"] -%}
                lst.shift()
            {%- elif "unshift" == input["operation"] -%}
                lst.unshift({{ input["value"] }})
            {%- elif "delete" == input["operation"] -%}
                lst.delete({{ input["value"] }})
            {%- elif "count" == input["operation"] -%}
                self.assertEqual(len(lst), {{ input["expected"] }})
            {%- endif %}
        {% endfor -%}
        {%- if case["expected"] and last -%}
        with self.assertRaises(ValueError) as err:
            lst.pop()
        self.assertEqual(type(err.exception), IndexError)
        self.assertEqual(err.exception.args[0], "{{case["expected"]["error"]}}")
        {% endif %}

{%- endmacro %}
{{ macros.header(["LinkedList"]) }}

class {{ exercise | camel_case }}Test(unittest.TestCase):
    {% for case in cases -%}
        {{ test_case(case) }}
    {% endfor %}
    {% if additional_cases | length -%}

    # Additional tests for this track

    {% for case in additional_cases -%}
    {{ test_case(case) }}
    {% endfor %}
    {%- endif %}
